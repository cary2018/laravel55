<?php/** * Created by PhpStorm. * User: asusa * Date: 2018/4/13/0013 * Author: Cary.He * Contact QQ  : 373889161($S$-Memory) * email: 373889161@qq.com * Time: 11:51 */namespace App\Http\Controllers\Admin;use App\Http\Model\Admin_user;use App\Http\Model\Admin_role;use App\Http\Model\Role;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Input;use Illuminate\Support\Facades\Validator;class AdminController extends BaseController{    public function index()    {        $data = Admin_user::orderBy('id','desc')->paginate(10);        $count = Admin_user::count();        return view('admin.user.index',compact('data','count'));    }    public function create()    {        $role = Role::all();        return view('admin.user.add',compact('role'));    }    /**     * @return $this|\Illuminate\Http\RedirectResponse     * 执行添加操作     */    public function store()    {        $input = Input::except('_token');        $data['user_name'] = $input['user_name'];        $data['password'] = Hash::make($input['password']);        $data['add_time'] = time();        $data['up_time'] = time();        $rules = [            'user_name' => 'required',            'password' => 'required|confirmed|between:3,20',        ];        $messages = [            'user_name.required'=>'用户名不能为空！',            'password.required'=>'密码不能为空！',            'password.between'=>'密码必需6到20位之间！',            'password.confirmed'=>'两次密码不一致！',        ];        $validator = Validator::make($input,$rules,$messages);        if($validator->passes()){            $user = Admin_user::where('user_name',$input['user_name'])->first();            if($user){                //$user->password = Hash::make($input['new_password']);                //$input = array_filter($input);  //去除空数组                //Admin_user::create($input);                return back()->with('errors', '用户名已存在！');            }else{                $input = array_filter($input);  //去除空数组                if (array_key_exists("is_admin",$input))                {                    $data['is_admin'] = $input['is_admin'];                }                if (array_key_exists("state",$input))                {                    $data['state'] = $input['state'];                }                if(array_key_exists('user_alias',$input)){                    $alias['user_alias'] = $input['user_alias'];                }                //$data = array_filter($data);  //去除空数组                $user = Admin_user::create($data);                $uid = $user->id;                if(array_key_exists('role_id',$input)){                    $role['role_id'] = $input['role_id'];                }else{                    $role['role_id'] = [];                }                if($role){                    foreach($role['role_id'] as $role_id)                    {                        $role['uid'] = $uid;                        $role['role_id'] = $role_id;                        $role['created_time'] = time();                        Admin_role::create($role);                    }                }else{                    dd('不存在！');                }                return redirect('admin/users');                //return back()->with('errors', '用户添加成功！');                //return back()->withErrors($validator);                //Admin_role::create($input);            }        }else{            return back()->withErrors($validator);        }    }    /**     * @param $id     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View     * 编辑用户     */    public function edit($id)    {        $field = Admin_user::find($id);        $role_id = Admin_role::where('uid',$id)->get(['role_id']);        $roles = $role_id->toArray();        $arr_id = [];        foreach($roles as $v)        {            $arr_id[]= $v['role_id'];        }        $role = Role::all();        return view('admin.user.edit',compact('field','role','arr_id'));    }    /**     * @param $id     * @return $this|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     * @throws \Exception     * 执行更新操作     */    public function update($id)    {        $input = Input::except('_token','_method');        $input = array_filter($input);        $data['up_time'] = time();        //$data['role_id'] = $input['role_id'];        if(array_key_exists('password',$input)){            $data['password'] = Hash::make($input['password']);        }        if (array_key_exists("is_admin",$input))        {            $data['is_admin'] = $input['is_admin'];        }else{            $data['is_admin'] = 0;        }        if (array_key_exists("state",$input))        {            $data['state'] = $input['state'];        }else{            $data['state'] = 0;        }        if(array_key_exists('user_alias',$input)){            $data['user_alias'] = $input['user_alias'];        }        if(array_key_exists('role_id',$input)){            $role['role_id'] = $input['role_id'];        }else{            $role['role_id'] = [];        }        /**         * 删除角色权限         */        $user_role = Admin_role::where('uid',$id)->get();        $roleid = [];        if($user_role)        {            foreach($user_role as $item)            {                $roleid[] = $item->role_id;                if (!in_array($item->role_id,$role['role_id']))                {                    $item_id = $item->role_id;                    Admin_role::where('uid',$id)                        ->where(function($q) use($item_id){                            $q->where('role_id',$item_id);                    })->delete();                }            }        }        //dd($user_role);        /**         * 添加权限角色         */        if($role){            foreach($role['role_id'] as $role_id)            {                if(!in_array($role_id,$roleid))                {                    $role['uid'] = $id;                    $role['role_id'] = $role_id;                    $role['created_time'] = time();                    Admin_role::create($role);                }            }        }else{            dd('不存在！');        }        $rules = [            'password' => 'confirmed|between:3,20',        ];        $messages = [            'password.between'=>'新密码必需3到20位之间！',            'password.confirmed'=>'两次密码不一致！',        ];        $validator = Validator::make($input,$rules,$messages);        if($validator->passes()){            $re = Admin_user::where('id',$id)->update($data);            if ($re) {                return redirect('admin/users');            } else {                return back()->with('errors', '数据未发生变化！！');            }        }else{            return back()->withErrors($validator);        }    }    /**     * @return array     * 异步更新管理员状态     */    public function changeAdmin()    {        $input = Input::except('_token');        $nav = Admin_user::find($input['id']);        if($input['is_admin']==0)        {            $nav->is_admin = 1;        }else{            $nav->is_admin = 0;        }        $re = $nav->update();        if($re)        {            $data = Admin_user::find($input['id'],['id','is_admin']);            $result = [                'status'=>$data->is_admin,                'msg' => '状态更新成功！'            ];        }else{            $result = [                'status'=>$data->is_admin,                'msg' => '状态更新失败！'            ];        }        return $result;    }    /**     * @return array     * 异步修改用户是否有效     */    public function changeState()    {        $input = Input::except('_token');        $nav = Admin_user::find($input['id']);        if($input['state']==0)        {            $nav->state = 1;        }else{            $nav->state = 0;        }        $re = $nav->update();        if($re)        {            $data = Admin_user::find($input['id'],['id','state']);            $result = [                'status'=>$data->state,                'msg' => '状态更新成功！'            ];        }else{            $result = [                'status'=>$data->state,                'msg' => '状态更新失败！'            ];        }        return $result;    }    /**     * @param $id     * @return array     * @throws \Exception     * 删除管理员     */    public function destroy($id)    {        $re = Admin_user::where('id',$id)->delete();        if ($re)        {            Admin_role::where('uid',$id)->delete();            $data = [                'status'=>0,                'msg'=>'删除成功！'            ];        }else{            $data = [                'status'=>1,                'msg'=>'删除失败，请稍后再试！'            ];        }        return $data;    }    /**     * 修改密码     */    public function pass()    {        if($input = Input::all()){            $rules = [                'password' => 'required',                'new_password' => 'required|confirmed|between:3,20',            ];            $messages = [                'password.required'=>'原始密码不能为空！',                'new_password.required'=>'新密码不能为空！',                'new_password.between'=>'新密码必需6到20位之间！',                'new_password.confirmed'=>'两次密码不一致！',            ];            $validator = Validator::make($input,$rules,$messages);            if($validator->passes()){                $user = Admin_user::where('id',session('user')->id)->first();                if ($user) {                    if (Hash::check($input['password'], $user->password)) {                        //return back()->with('mess','密码正确！');                        //session(['user' => $user]);   //保存用户登录信息                        //return redirect('admin/index');                        $user->password = Hash::make($input['new_password']);                        $user->update();                        return back()->with('errors', '密码修改成功！');                    } else {                        return back()->with('errors', '原始密码错误！');                    }                } else {                    return back()->with('errors', '登录失效，请重新登录！');                }                //dd($user);            }else{                return back()->withErrors($validator);            }        }        return view('admin.pass');    }}